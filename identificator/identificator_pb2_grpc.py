# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import identificator_pb2 as identificator__pb2


class IdentificatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Identify = channel.unary_unary(
                '/sk.stuba.fei.api.msus.dp.identificator.Identificator/Identify',
                request_serializer=identificator__pb2.IdentificationRequest.SerializeToString,
                response_deserializer=identificator__pb2.IdentificationResponse.FromString,
                )
        self.Verify = channel.unary_unary(
                '/sk.stuba.fei.api.msus.dp.identificator.Identificator/Verify',
                request_serializer=identificator__pb2.VerificationRequest.SerializeToString,
                response_deserializer=identificator__pb2.VerificationResponse.FromString,
                )


class IdentificatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Identify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Verify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentificatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=identificator__pb2.IdentificationRequest.FromString,
                    response_serializer=identificator__pb2.IdentificationResponse.SerializeToString,
            ),
            'Verify': grpc.unary_unary_rpc_method_handler(
                    servicer.Verify,
                    request_deserializer=identificator__pb2.VerificationRequest.FromString,
                    response_serializer=identificator__pb2.VerificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sk.stuba.fei.api.msus.dp.identificator.Identificator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Identificator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sk.stuba.fei.api.msus.dp.identificator.Identificator/Identify',
            identificator__pb2.IdentificationRequest.SerializeToString,
            identificator__pb2.IdentificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sk.stuba.fei.api.msus.dp.identificator.Identificator/Verify',
            identificator__pb2.VerificationRequest.SerializeToString,
            identificator__pb2.VerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
